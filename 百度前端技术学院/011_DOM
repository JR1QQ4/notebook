# JavaScript

## 表单

1.约束验证
- 约束验证 HTML 输入属性
- 约束验证 CSS 伪选择器
- 约束验证 DOM 属性和方法

（1）约束验证 HTML 输入属性：
-  disabled    规定 input 元素应该被禁用
-  max         规定 input 元素的最大值
-  min         规定 input 元素的最小值
-  pattern     规定 input 元素的值模式
-  required    规定输入字段需要某个元素
-  type        规定 input 元素的类型
-  maxlength   规定输入字段允许的最大长度
-  autofocus   规定当页面加载时 <input> 元素应该自动获得焦点
-  multiple    规定允许用户在 <input> 元素中输入一个以上的值
-  placeholder 规定用以描述输入字段预期值的提示
-  readonly    规定输入字段为只读

（2）约束验证 CSS 伪选择器：
-  :disabled   选择设置了 "disabled" 属性的 input 元素。
-  :invalid    选择带有无效值的 input 元素。
-  :optional   选择未设置 "required" 属性的 input 元素。
-  :required   选择设置了 "required" 属性的 input 元素。
-  :valid      选择带有有效值的 input 元素。

(3)约束验证 DOM 方法
a.checkValidity()
```
function myFunction() {
  var inpObj = document.getElementById("id1");
  if (!inpObj.checkValidity()) {
    document.getElementById("demo").innerHTML = inpObj.validationMessage;
  } else {
    document.getElementById("demo").innerHTML = "输入有效";
  } 
}
```

b.setCustomValidity() 设置 input 元素的 validationMessage 属性，用于自定义错误提示信息的方法
```
function myFunction() {
  var x = document.getElementById("nu");
  x.setCustomValidity("");//使用前先取消自定义，否则下次点击checkValidity总返false
  if (x.checkValidity() == false) {
    x.setCustomValidity("错误");
    document.getElementById("demo").innerHTML = x.validationMessage;
  }
  else {
    x.setCustomValidity("正确");
    document.getElementById("demo").innerHTML = x.validationMessage;
  }
}
```

c.约束验证DOM属性
- validity            包含与 input 元素的合法性相关的布尔属性。
    + input 元素的 validity 属性包含了与数据合法性相关的一系列属性：
    + rangeOverflow   设置为 true，如果元素值大约其 max 属性。
    + rangeUnderflow  设置为 true，如果元素值小于其 min 属性。
- validationMessage   包含当 validity 为 false 时浏览器显示的消息。
- willValidate        指示是否验证 input 元素。
```
<input id="id1" type="number" max="100">
<button onclick="myFunction()">OK</button>
<p id="demo"></p>
<script>
function myFunction() {
    var txt = "";
    if (document.getElementById("id1").validity.rangeOverflow) {
        txt = "值太大";
    }
     document.getElementById("demo").innerHTML = txt;
}
</script> 
```

## 对象

1.对象定义
在 JavaScript 中，几乎“所有事物”都是对象。
-  布尔是对象（如果用 new 关键词定义）
-  数字是对象（如果用 new 关键词定义）
-  字符串是对象（如果用 new 关键词定义）
-  日期永远都是对象
-  算术永远都是对象
-  正则表达式永远都是对象
-  数组永远都是对象
-  函数永远都是对象
-  对象永远都是对象

（1）JavaScript 原始值
原始值指的是没有属性或方法的值。原始数据类型指的是拥有原始值的数据。
JavaScript 定义了 5 种原始数据类型：string、number、boolean、null、undefined

（2）对象是包含变量的变量，JavaScript 对象是命名值的集合。
```
var person = {firstName:"Bill", lastName:"Gates", age:62, eyeColor:"blue"};
```

（3）对象属性：JavaScript 对象中的命名值，被称为属性。

（4）对象方法：方法是可以在对象上执行的动作，对象方法是包含函数定义的对象属性。

（5）创建对象
```
// 字面量
var person = {firstName:"Bill", lastName:"Gates", age:62, eyeColor:"blue"};

// 关键词 new
var person = new Object();
person.firstName = "Bill";
person.lastName = "Gates";
person.age = 50;
person.eyeColor = "blue"; 
// JavaScript 对象是易变的
var person = {firstName:"Bill", lastName:"Gates", age:62, eyeColor:"blue"};
var x = person;//对象 x 并非 person 的副本。它就是 person。x 和 person 是同一个对象。
x.age = 10;           // 这将同时改变 both x.age 和 person.age
```

2.属性与方法
（1）删除属性：
delete 操作符被设计用于对象属性。它对变量或函数没有影响。
delete 操作符不应被用于预定义的 JavaScript 对象属性。这样做会使应用程序崩溃。
delete 关键词不会删除被继承的属性，但是如果您删除了某个原型属性，则将影响到所有从原型继承的对象。

（2）添加方法
```
function person(firstName, lastName, age, eyeColor) {
    this.firstName = firstName;  
    this.lastName = lastName;
    this.age = age;
    this.eyeColor = eyeColor;
    this.changeName = function (name) {
        this.lastName = name;
    };
}
```

3.对象访问器
ECMAScript 5 (2009) 引入了 Getter 和 Setter。Getter 和 Setter 允许您定义对象访问器（被计算的属性）。

（1）Getter（get 关键词）
```
// 创建对象：
var person = {
  firstName: "Bill",
  lastName : "Gates",
  language : "en",
  get lang() {
    return this.language;
  }
};
person.lang; // "en"
```

（2）Setter（set 关键词）
```
var person = {
  firstName: "Bill",
  lastName : "Gates",
  language : "",
  set lang(lang) {
    this.language = lang;
  }
};
// 使用 setter 来设置对象属性：
person.lang = "en";   // person.lang("en")错误，因为lang不是方法
```

4.对象构造器
```
function Person(first, last, age, eye) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
    this.name = function() {return this.firstName + " " + this.lastName;};
}
var myFather = new Person("Bill", "Gates", 62, "blue");
var myMother = new Person("Steve", "Jobs", 56, "green");
```

（1）this
在 JavaScript 中，被称为 this 的事物是代码的“拥有者”。
this 的值，在对象中使用时，就是对象本身。
在构造器函数中，this 是没有值的。它是新对象的替代物。 当一个新对象被创建时，this 的值会成为这个新对象。
请注意 this 并不是变量。它是关键词。您无法改变 this 的值。

（2）内建 JavaScript 构造器
```
var x1 = new Object();    // 一个新的 Object 对象
var x2 = new String();    // 一个新的 String 对象
var x3 = new Number();    // 一个新的 Number 对象
var x4 = new Boolean();   // 一个新的 Boolean 对象
var x5 = new Array();     // 一个新的 Array 对象
var x6 = new RegExp();    // 一个新的 RegExp 对象
var x7 = new Function();  // 一个新的 Function 对象
var x8 = new Date();      // 一个新的 Date 对象
```

5.对象原型
所有 JavaScript 对象都从原型继承属性和方法。

日期对象继承自 Date.prototype。数组对象继承自 Array.prototype。Person 对象继承自 Person.prototype。

Object.prototype 位于原型继承链的顶端：日期对象、数组对象和 Person 对象都继承自 Object.prototype。

（1）ES5 新的对象方法
```
Object.defineProperty(object, property, descriptor) // 添加或更改对象属性
Object.defineProperties(object, descriptors) // 添加或更改多个对象属性
Object.getOwnPropertyDescriptor(object, property) // 访问属性
Object.getOwnPropertyNames(object) // 以数组返回所有属性
Object.keys(object) // 以数组返回所有可枚举的属性
Object.getPrototypeOf(object) // 访问原型
Object.preventExtensions(object) // 阻止向对象添加属性
Object.isExtensible(object) // 如果可将属性添加到对象，则返回 true
Object.seal(object) // 防止更改对象属性（而不是值）
Object.isSealed(object) // 如果对象被密封，则返回 true
Object.freeze(object) // 防止对对象进行任何更改
Object.isFrozen(object) // 如果对象被冻结，则返回 true
```

（2）更改元数据
```
writable : true      // 属性值可修改
enumerable : true    // 属性可枚举
configurable : true  // 属性可重新配置
writable : false     // 属性值不可修改
enumerable : false   // 属性不可枚举
configurable : false // 属性不可重新配置

Object.defineProperty(person, "language", {writable:false}); // 只读

Object.defineProperty(obj, "reset", {
  get : function () {this.counter = 0;}
});
Object.defineProperty(obj, "subtract", {
  set : function (i) {this.counter -= i;}
});
```

## 函数

JavaScript 函数是通过 function 关键词定义的。您可以使用函数声明或函数表达式。

1.箭头函数
```
// ES5
var x = function(x, y) {
  return x * y;
}

// ES6
const x = (x, y) => x * y;
const x = (x, y) => { return x * y };  //等价
```

2.函数参数
arguments 对象包含函数调用时使用的参数数组。
参数通过值传递：函数只知道值，而不是参数的位置。如果函数改变了参数的值，它不会改变参数的原始值。参数的改变在函数之外是不可见的。
对象是由引用传递的：如果函数改变了对象属性，它也改变了原始值。对象属性的改变在函数之外是可见的。

3.Call
```
var person = {
    fullName: function() {
        return this.firstName + " " + this.lastName;
    }
}
var person1 = {
    firstName:"Bill",
    lastName: "Gates",
}
person.fullName.call(person1);  // 将返回 "Bill Gates"


var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"Bill",
  lastName: "Gates"
}
person.fullName.call(person1, "Seattle", "USA"); // "Bill Gates,Seattle,USA"
```

4.Apply
```
var person = {
    fullName: function() {
        return this.firstName + " " + this.lastName;
    }
}
var person1 = {
    firstName: "Bill",
    lastName: "Gates",
}
person.fullName.apply(person1);  // 将返回 "Bill Gates"

var person = {
  fullName: function(city, country) {
    return this.firstName + " " + this.lastName + "," + city + "," + country;
  }
}
var person1 = {
  firstName:"John",
  lastName: "Doe"
}
person.fullName.apply(person1, ["Oslo", "Norway"]);//"John Doe,Oslo,Norway"

Math.max.apply(0, [1,2,3]); // 也会返回 3
Math.max.apply(" ", [1,2,3]); // 也会返回 3
```

5.闭包
JavaScript 变量属于本地或全局作用域。全局变量能够通过闭包实现局部（私有）。
```
var counter = 0; // 初始化计数器
function add() {  // 递增计数器的函数
  var counter = 0; 
  counter += 1;
}
add();add();add();// 调用三次 add()
//此时计数器 counter 应该是 3。但它是 0。


function add() { // 递增计数器的函数
  var counter = 0; 
  counter += 1;
  return counter;
}
add();add();add();// 调用三次 add()
//此时计数器  counter  应该是 3。但它是 1。

function add() {
    var counter = 0;
    function plus() {counter += 1;}
    plus();     
    return counter; 
}  
add(); // counter = 1

var add = (function () {
    var counter = 0;
    return function () {return counter += 1;}
})();
add();add();add();
// 计数器 counter 目前是 3 
变量 add 的赋值是自调用函数的返回值。
这个自调用函数只运行一次。它设置计数器为零（0），并返回函数表达式。
这样 add 成为了函数。最“精彩的”部分是它能够访问父作用域中的计数器。
这被称为 JavaScript 闭包。它使函数拥有“私有”变量成为可能。
计数器被这个匿名函数的作用域保护，并且只能使用 add 函数来修改。
闭包指的是有权访问父作用域的函数，即使在父函数关闭之后。
```

## DOM

W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问、更新文档的内容、结构和样式。
W3C DOM 标准被分为 3 个不同的部分：
-  Core DOM - 所有文档类型的标准模型
-  XML DOM - XML 文档的标准模型
-  HTML DOM - HTML 文档的标准模型

HTML DOM 是 HTML 的标准对象模型和编程接口。它定义了：
-  作为对象的 HTML 元素
-  所有 HTML 元素的属性
-  访问所有 HTML 元素的方法
-  所有 HTML 元素的事件
-  即，HTML DOM 是关于如何获取、更改、添加或删除 HTML 元素的标准。

HTML DOM 方法 是您能够（在 HTML 元素上）执行的动作。
HTML DOM 属性 是您能够设置或改变的 HTML 元素的值。

## 浏览器对象模型

浏览器对象模型（Browser Object Model (BOM)）允许 JavaScript 与浏览器对话。
Window 对象：
所有浏览器都支持 window 对象。它代表浏览器的窗口。所有全局 JavaScript 对象，函数和变量自动成为 window 对象的成员。全局变量是 window 对象的属性。全局函数是 window 对象的方法。甚至（HTML DOM 的）document 对象也是 window 对象属性。

1.窗口尺寸
```
window.innerHeight - 浏览器窗口的内高度（以像素计）722
window.innerWidth  - 浏览器窗口的内宽度（以像素计）1536,

document.documentElement.clientHeight // Internet Explorer 8, 7, 6, 5
document.documentElement.clientWidth
// 或
document.body.clientHeight
document.body.clientWidth

var w = window.innerWidth
|| document.documentElement.clientWidth
|| document.body.clientWidth;

var h = window.innerHeight
|| document.documentElement.clientHeight
|| document.body.clientHeight; 
```

2.窗口方法
```
window.open() - 打开新窗口
window.close() - 关闭当前窗口
window.moveTo() -移动当前窗口
window.resizeTo() -重新调整当前窗口
```

3.window.screen 对象包含用户屏幕的信息
```
screen.width      返回以像素计的访问者屏幕宽度1536
screen.height     返回以像素计的访问者屏幕的高度864
screen.availWidth 返回访问者屏幕的宽度，以像素计，减去诸如窗口工具条之类的界面特征
screen.availHeight返回访问者屏幕的高度，以像素计，减去诸如窗口工具条之类的界面特征824
screen.colorDepth 返回用于颜色的比特数24,计算机使用24位或32位硬件色彩分辨率  
screen.pixelDepth 返回屏幕的像素深度24
```

4.window.location 对象可用于获取当前页面地址（URL）并把浏览器重定向到新页面
```
window.location.href 返回当前页面的 href (URL)
window.location.hostname 返回 web 主机的域名
window.location.pathname 返回当前页面的路径或文件名
window.location.protocol 返回使用的 web 协议（http: 或 https:）
window.location.port 返回（当前页面的）互联网主机端口的编号，如果是默认值不显示或为0
window.location.assign() 加载新文档assign(url)
```

5.window.history 对象包含浏览器历史
```
history.back() - 等同于在浏览器点击后退按钮
history.forward() - 等同于在浏览器中点击前进按钮,加载历史列表中下一个 URL
```

6.window.navigator 对象包含有关访问者的信息
```
navigator.appName     // "Netscape",返回浏览器的应用程序名称
navigator.appCodeName // "Mozilla",返回浏览器的应用程序代码名称
navigator.platform    // "Win32",返回浏览器平台（操作系统）
navigator.cookieEnabled // 返回 true，如果 cookie 已启用，否则返回 false
navigator.product    // "Gecko",返回浏览器引擎的产品名称
navigator.appVersion // "...Chrome/74.0.3729.108..."返回有关浏览器的版本信息
navigator.userAgent // "Mozilla/5.0..."返回由浏览器发送到服务器的用户代理报头
navigator.language // "zh-CN",返回浏览器语言
navigator.onLine // true,返回 true，假如浏览器在线
navigator.javaEnabled() // 返回 true，如果 Java 已启用
```
警告 navigator 对象的信息通常是误导性的，不应该用于检测浏览器版本:
-  不同浏览器能够使用相同名称
-  导航数据可被浏览器拥有者更改
-  某些浏览器会错误标识自身以绕过站点测试
-  浏览器无法报告发布晚于浏览器的新操作系统

7.Timing 事件
（1）setTimeout() 方法
```
window.setTimeout(function, milliseconds); // 等待指定的毫秒数后执行函数
myVar = setTimeout(function, milliseconds);
clearTimeout(myVar);  // 停止执行 setTimeout() 中规定的函数
```

（2）setInterval() 方法
```
window.setInterval(function, milliseconds); // 在每个给定的时间间隔重复给定的函数
myVar = setInterval(function, milliseconds);
clearInterval(myVar); // 停止 setInterval() 方法中指定的函数的执行
```

8.Cookies：Cookie 让您在网页中存储用户信息。
```
// 创建 cookie
document.cookie = "username=Bill Gates";
document.cookie = "username=Bill Gates; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/";

// 读取 cookie
var x = document.cookie;

// 改变 cookie
document.cookie = "username=Steve Jobs; expires=Sun, 31 Dec 2017 12:00:00 UTC; path=/";

// 删除 cookie
document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
```


## AJAX 

AJAX 不刷新页面更新网页； 在页面加载后从服务器请求数据； 在页面加载后从服务器接收数据； 在后台向服务器发送数据。

AJAX 并不是编程语言。是一种从网页访问 Web 服务器的技术。代表异步 JavaScript 和 XML。
```
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {  // 定义当请求接收到应答时所执行的函数
    if (this.readyState == 4 && this.status == 200) {
     document.getElementById("demo").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
} 
```

1.XMLHttpRequest 对象，用于同幕后服务器交换数据。这意味着可以更新网页的部分，而不需要重新加载整个页面。
```
// 创建 XMLHttpRequest 对象
variable = new XMLHttpRequest();
```

（1）XMLHttpRequest 对象方法
```
new XMLHttpRequest()    创建新的 XMLHttpRequest 对象
abort() 取消当前请求
getAllResponseHeaders() 返回头部信息
getResponseHeader() 返回特定的头部信息
open(method, url, async, user, psw) 
        -  method：请求类型 GET 或 POST
        -  url：文件位置
        -  async：true（异步）或 false（同步）
        -  user：可选的用户名称
        -  psw：可选的密码
send()  将请求发送到服务器，用于 GET 请求
send(string)    将请求发送到服务器，用于 POST 请求
setRequestHeader()  向要发送的报头添加标签/值对
```

（2）XMLHttpRequest 对象属性
```
onreadystatechange  定义当 readyState 属性发生变化时被调用的函数
readyState   保存 XMLHttpRequest 的状态。
        -  0：请求未初始化
        -  1：服务器连接已建立
        -  2：请求已收到
        -  3：正在处理请求
        -  4：请求已完成且响应已就绪
responseText    以字符串返回响应数据
responseXML   以 XML 数据返回响应数据
status  返回请求的状态号
        -  200: "OK"
        -  403: "Forbidden"
        -  404: "Not Found"
        -  如需完整列表请访问 Http 消息参考手册
statusText  返回状态文本（比如 "OK" 或 "Not Found"）
```

2.向服务器发送请求
```
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();

open(method, url, async)    规定请求的类型
        -  method：请求的类型：GET 还是 POST
        -  url：服务器（文件）位置
        -  async：true（异步）或 false（同步）
            -  异步：在等待服务器响应时执行其他脚本;当响应就绪时处理响应.
            -  同步：JavaScript 将停止执行直到服务器响应就绪
send()  向服务器发送请求（用于 GET）
send(string)    向服务器发送请求（用于 POST）
```

（1）GET 还是 POST
以下情况始终使用 POST：
```
缓存文件不是选项（更新服务器上的文件或数据库）
向服务器发送大量数据（POST 无大小限制）
发送用户输入（可包含未知字符），POST 比 GET 更强大更安全
```

（2）GET 请求
```
xhttp.open("GET", "demo_get.asp", true);
xhttp.send();

xhttp.open("GET", "demo_get.asp?t=" + Math.random(), true);
xhttp.send();

xhttp.open("GET", "demo_get2.asp?fname=Bill&lname=Gates", true);
xhttp.send();
```

（3）POST 请求
```
xhttp.open("POST", "demo_post.asp", true);
xhttp.send();

xhttp.open("POST", "ajax_test.asp", true);
xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhttp.send("fname=Bill&lname=Gates");

setRequestHeader(header, value)   向请求添加 HTTP 头部
        -  header：规定头部名称
        -  value：规定头部值
```

3.服务器响应
（1）onreadystatechange 属性
-  readyState 属性存留 XMLHttpRequest 的状态。
-  onreadystatechange 属性定义当 readyState 发生变化时执行的函数。
-  status 属性和 statusText 属性存有 XMLHttpRequest 对象的状态。

（2）使用回调函数
```
function loadDoc(url, cFunction) {
  var xhttp;
  xhttp=new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      cFunction(this);
    }
  };
  xhttp.open("GET", url, true);
  xhttp.send();
}
function myFunction(xhttp) {
  document.getElementById("demo").innerHTML =
  xhttp.responseText;
}
```

（3）服务器响应属性
```
responseText    获取字符串形式的响应数据
responseXML     获取 XML 数据形式的响应数据
```

（4）服务器响应方法
```
getResponseHeader()     从服务器返回特定的头部信息
getAllResponseHeaders() 从服务器返回所有头部信息
```

4.XML
```

function loadDoc() {
  var xhttp = new XMLHttpRequest();
   xhttp.onreadystatechange = function() {
    if (this.readyState  == 4 && this.status == 200) {
    myFunction(this);
     }
  };
  xhttp.open("GET", "music_list.xml", true);
  xhttp.send();
}
function myFunction(xml) {
  var i;
  var xmlDoc = xml.responseXML;
  var table="<tr><th>艺术家</th><th>曲目</th></tr>";
  var x = xmlDoc.getElementsByTagName("TRACK");
  for (i = 0; i <x.length;  i++) { 
    table += "<tr><td>" +
    x[i].getElementsByTagName("ARTIST")[0].childNodes[0].nodeValue  +
    "</td><td>" +
    x[i].getElementsByTagName("TITLE")[0].childNodes[0].nodeValue  +
    "</td></tr>";
  }
   document.getElementById("demo").innerHTML = table;
} 
```


## JSON

JSON: JavaScript Object Notation（JavaScript 对象标记法）。JSON 是一种存储和交换数据的语法。JSON 是通过 JavaScript 对象标记法书写的文本。

交换数据：当数据在浏览器与服务器之间进行交换时，这些数据只能是文本。JSON 属于文本，并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。

发送数据：如果您的数据存储在 JavaScript 对象中，您可以把该对象转换为 JSON，然后将其发送到服务器。
```
var myObj = { name:"Bill Gates",  age:62, city:"Seattle" };
var myJSON =  JSON.stringify(myObj);
window.location = "demo_json.php?x=" + myJSON;
```

接收数据：如果您以 JSON 格式接收到数据，您能够将其转换为 JavaScript 对象。
```
var myJSON = '{ "name":"Bill Gates",  "age":62, "city":"Seattle" }';
var myObj =  JSON.parse(myJSON);
document.getElementById("demo").innerHTML = myObj.name;
```

存储数据：在存储数据时，数据必须是某种具体的格式，并且无论您选择在何处存储它，文本永远是合法格式之一。
```
//存储数据：
myObj = { name:"Bill Gates",  age:62, city:"Seattle" };
myJSON =  JSON.stringify(myObj);
localStorage.setItem("testJSON", myJSON);

//接收数据：
text = localStorage.getItem("testJSON");
obj =  JSON.parse(text);
document.getElementById("demo").innerHTML = obj.name;
```

1.JSON 语法：JSON 语法是 JavaScript 语法的子集。
-  数据在名称/值对中：键必须是字符串，由双引号包围；字符串值，必须由双引号编写。
-  数据由逗号分隔
-  花括号容纳对象
-  方括号容纳数组
```
{ "name":"Bill Gates" }  //  JSON
{ name:"Bill Gates" }  //  JavaScript
// JSON 文件的文件类型是 ".json"
// JSON 文本的 MIME 类型是 "application/json"
```

2.JSON vs XML： 均可用于从 web 服务器接收数据
```
{"employees":[
    { "firstName":"Bill", "lastName":"Gates" },
    { "firstName":"Steve", "lastName":"Jobs" },
    { "firstName":"Elon", "lastName":"Musk" }
]}

JSON 与 XML 的差异在于：
-  JSON 不使用标签
-  JSON 更短
-  JSON 的读写速度更快
-  JSON 可使用数组
```

3.JSON 数据类型
在 JSON 中，值必须是以下数据类型之一：字符串、数字、对象（JSON 对象）、数组、布尔、Null
JSON 的值不可以是以下数据类型之一：函数、日期、undefined
```
{ "name":"John" }
{ "age":30 }
{ "employee":{ "name":"Bill Gates", "age":62, "city":"Seattle" }}
{ "employees":[ "Bill", "Steve", "David" ] }
{ "sale":true }
{ "middlename":null }
```

4.JSON.parse(),通过 JSON.parse() 解析数据，这些数据会成为 JavaScript 对象。
```
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function()  {
    if (this.readyState == 4 && this.status == 200) {
        myObj =  JSON.parse(this.responseText);
        document.getElementById("demo").innerHTML  = myObj.name;
    }
};
xmlhttp.open("GET", "json_demo.txt", true);
xmlhttp.send();

var text =  '{ "name":"Bill Gates", "birth":"1955-10-28", "city":"Seattle"}';
var obj = JSON.parse(text, function (key, value) {
    if  (key == "birth") {  // 如果您需要包含日期，请写为字符串。
        return new Date(value);
    } else {
         return value;
   }});
//  {name: "Bill Gates", birth: Fri Oct 28 1955 08:00:00..., city: "Seattle"}

var text =  '{ "name":"Bill Gates", "age":"function () {return 62;}", "city":"Seattle"}';
var obj = JSON.parse(text);
// {name: "Bill Gates", age: "function () {return 62;}", city: "Seattle"}
```

5.JSON.stringify(),把 JavaScript 对象转换为字符串。
```
var obj = { name:"Bill Gates", age:62, city:"Seattle"};
var myJSON = JSON.stringify(obj);
// "{"name":"Bill Gates","age":62,"city":"Seattle"}"

var arr = [ "Bill Gates", "Steve Jobs", "Elon Musk" ];
var myJSON =  JSON.stringify(arr);
// "["Bill Gates","Steve Jobs","Elon Musk"]"

var obj =  { "name":"Bill Gates", "today":new Date(), "city":"Seattle"};
var myJSON = JSON.stringify(obj);
// "{"name":"Bill Gates","today":"2019-06-11T11:49:45.060Z","city":"Seattle"}"

var obj =  { "name":"Bill Gates", "age":function () {return 62;}, "city":"Seattle"};
var myJSON = JSON.stringify(obj);  // 删除任何函数，包括键和值
// "{"name":"Bill Gates","city":"Seattle"}"
```

6.JSON 对象
```
myObj =  { "name":"Bill Gates", "age":62, "car":null };
x = myObj.name;    // 访问对象值

myObj =  { "name":"Bill Gates", "age":62, "car":null };
x = myObj["name"];    // 访问对象值

myObj.cars["car3"] = "Mercedes Benz";  // 修改值

delete myObj.cars.car1;  // 删除对象属性
```

7.JSON 数组
```
myObj =  {
   "name":"Bill Gates",
   "age":62,
   "cars": [
      { "name":"Porsche",  "models":[ "911", "Taycan" ] },
      { "name":"BMW", "models":[ "M5", "M3", "X5" ] },
      { "name":"Volvo", "models":[ "XC60", "V60" ] }
   ]
}
for (i in myObj.cars) {
    x += "<h1>" + myObj.cars[i].name  + "</h1>";
    for (j in myObj.cars[i].models) {
         x += myObj.cars[i].models[j];
    }
}
```

8.JSONP,JSONP 是一种无需考虑跨域问题即可传送 JSON 数据的方法。JSONP 不使用 XMLHttpRequest 对象。JSONP 使用 <script> 标签取而代之。

JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 JSON 数据。

JSONP目前还是比较流行的跨域方式，虽然JSONP使用起来方便，但是也存在一些问题： 
首先， JSONP 是从其他域中加载代码执行。如果其他域不安全，很可能会在响应中夹带一些恶意代码，而此时除了完全放弃 JSONP 调用之外，没有办法追究。因此在使用不是你自己运维的 Web 服务时，一定得保证它安全可靠。

```
<?php 
$myJSON = '{ "name":"Bill Gates", "age":62, "city":"Seattle" }';
echo "myFunc(".$myJSON.");";  // 服务器端
?>
function clickButton() { // 创建动态脚本标签 script
    var s = document.createElement("script");
    s.src = "demo_jsonp.php";
    document.body.appendChild(s);
}
function myFunc(myObj)  { // 回调函数
    document.getElementById("demo").innerHTML =  myObj.name;
}
```

## jQuery

jQuery 由 John Resig 于 2006 年创建。它旨在处理浏览器不兼容性并简化 HTML DOM 操作、事件处理、动画和 Ajax。

1.DOM 选择器
```
var myElement = $("#id01");
var myElements = $(".intro");
var myElements = $("p");
var myElements = $("p.intro");
```

2.HTML 元素
```
myElement.text("Hello China!");
var myText = myElement.text();
var myElement.html("<p>Hello World</p>");
var content = myElement.html();
```

3.CSS 样式
```
myElement.hide();
myElement.show();
myElement.css("font-size","35px");
```

4.HTML DOM
```
$("#id").remove();
var myParent = myElement.parent();
```
